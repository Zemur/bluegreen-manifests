apiVersion: v1
kind: ConfigMap
metadata:
  annotations:
    argocd.argoproj.io/tracking-id: 'argo-cd:/ConfigMap:argocd/argocd-cm'
  labels:
    app.kubernetes.io/name: argocd-cm
    app.kubernetes.io/part-of: argocd
  name: argocd-cm
data:
  application.instanceLabelKey: argocd.argoproj.io/instance
  application.resourceTrackingMethod: annotation
  accounts.image-updater: apiKey
  accounts.image-updater.enabled: "true"
  server.rbac.log.enforce.enable: "true"
  resource.customizations: |
    networking.k8s.io/Ingress:
        health.lua: |
          hs = {}
          hs.status = "Healthy"
          return hs
  configManagementPlugins: |
    - name: argocd-vault-plugin-kustomize
      generate:
        command: ["sh", "-c"]
        args: ["kustomize build . | argocd-vault-plugin generate -"]
    - name: argocd-vault-plugin-helm-remote-repo
      init:
        command: [sh, -c]
        args: ["helm repo add $ARGOCD_ENV_REPO_NAME $ARGOCD_ENV_REPO; helm repo update"]
      generate:
        command: ["sh", "-c"]
        args: ["helm template $ARGOCD_ENV_CHART_NAME $ARGOCD_ENV_REPO_NAME/$ARGOCD_ENV_CHART_NAME -f $ARGOCD_ENV_VALUES_FILE -n $ARGOCD_APP_NAMESPACE --include-crds --version $ARGOCD_ENV_CHART_VERSION | argocd-vault-plugin generate -"]
    - name: ejson-decrypt-generate-k8s-secret
      init:
        command: ["sh", "-c"]
        args: ["echo $(vault kv get -field private_key $vault_secret_path) >  $ejson_key_dir/$(vault kv get -field public_key $vault_secret_path) "]
      generate:
        command: ["sh", "ejson_process.sh"]
      lockRepo: true
    - name: helm-resolver # Use this plugin if a helm chart should be kustomized adding an extra resource, eg: the helm chart is public and needs an extra service, which looks the same across all the clusters
      init:
        command: ["sh", "-c"]
        args: ['helm repo add "$ARGOCD_ENV_REPO_NAME" "$ARGOCD_ENV_REPO"; helm repo update']
      generate:
        command: ["sh", "-c"]
        args: ['helm template --include-crds "$ARGOCD_ENV_CHART_NAME" "$ARGOCD_ENV_REPO_NAME/$ARGOCD_ENV_CHART_NAME" --values $ARGOCD_ENV_VALUES_FILE --version "$ARGOCD_ENV_CHART_VERSION" --namespace "$ARGOCD_APP_NAMESPACE" --kube-version 1.22 > all.yaml && kustomize build | argocd-vault-plugin generate -']
    - name: helm-overlays # Use this plugin if a helm chart should be kustomized with overlays, eg: the helm chart is public and needs an extra resource that changes in every cluster, like a certificate
      init:
        command: ["sh", "-c"]
        args: ['helm repo add "$ARGOCD_ENV_REPO_NAME" "$ARGOCD_ENV_REPO"; helm repo update']
      generate:
        command: ["sh", "-c"]
        args: ['cp -R $ARGOCD_ENV_BASE_PATH base && helm template "$ARGOCD_ENV_CHART_NAME" "$ARGOCD_ENV_REPO_NAME/$ARGOCD_ENV_CHART_NAME" --values "$ARGOCD_ENV_VALUES_FILE" --version "$ARGOCD_ENV_CHART_VERSION" --namespace "$ARGOCD_APP_NAMESPACE" --kube-version 1.22 > ./base/all.yaml && kustomize build | argocd-vault-plugin generate -']
    - name: helm-templater # Use this plugin to execute helm template against a chart within the same source repository as your application
      generate:
        command: ["sh", "-c"]
        args: ['helm template "$ARGOCD_ENV_CHART_NAME" --values $ARGOCD_ENV_VALUES_FILE "$ARGOCD_ENV_CHART_DIR" > all.yaml && kustomize build | argocd-vault-plugin generate -']
    - name: examplecompany-helm-resolver # Use this plugin to kustomize a chart from examplecompany-helm-charts, adding an extra resource, eg: the helm chart needs an extra service, which looks the same across all the clusters
      init:
        command: ["sh", "-c"]
        args: ['helm repo add "examplecompany" "$EXAMPLE_COMPANY_HELM_REPO_URL" --username "$EXAMPLE_COMPANY_HELM_USERNAME" --password "$EXAMPLE_COMPANY_HELM_PASSWORD"; helm repo update']
      generate:
        command: ["sh", "-c"]
        args: ['helm template --username "$EXAMPLE_COMPANY_HELM_USERNAME" --password "$EXAMPLE_COMPANY_HELM_PASSWORD" --include-crds "$ARGOCD_ENV_CHART_NAME" "examplecompany/$ARGOCD_ENV_CHART_NAME" --values $ARGOCD_ENV_VALUES_FILE --version "$ARGOCD_ENV_CHART_VERSION" --namespace "$ARGOCD_APP_NAMESPACE" --kube-version 1.22 > all.yaml && kustomize build | argocd-vault-plugin generate -']
    - name: casino-helm-resolver # Use this plugin to kustomize a chart from casino-manifests, adding an extra resource, eg: the helm chart needs an extra service, which looks the same across all the clusters
      init:
        command: ["sh", "-c"]
        args: ['helm repo add "casino" "$CASINO_HELM_REPO_URL" --username "$EXAMPLE_COMPANY_HELM_USERNAME" --password "$EXAMPLE_COMPANY_HELM_PASSWORD"; helm repo update']
      generate:
        command: ["sh", "-c"]
        args: ['helm template --username "$EXAMPLE_COMPANY_HELM_USERNAME" --password "$EXAMPLE_COMPANY_HELM_PASSWORD" --include-crds "$ARGOCD_ENV_CHART_NAME" "casino/$ARGOCD_ENV_CHART_NAME" --values $ARGOCD_ENV_VALUES_FILE --version "$ARGOCD_ENV_CHART_VERSION" --namespace "$ARGOCD_APP_NAMESPACE" --kube-version 1.22 > all.yaml && kustomize build | argocd-vault-plugin generate -']
    - name: concierge-helm-resolver # Use this plugin to kustomize a chart from concierge-manifests, adding an extra resource, eg: the helm chart needs an extra service, which looks the same across all the clusters
      init:
        command: ["sh", "-c"]
        args: ['helm repo add "concierge" "$CONCIERGE_HELM_REPO_URL" --username "$EXAMPLE_COMPANY_HELM_USERNAME" --password "$EXAMPLE_COMPANY_HELM_PASSWORD"; helm repo update']
      generate:
        command: ["sh", "-c"]
        args: ['helm template --username "$EXAMPLE_COMPANY_HELM_USERNAME" --password "$EXAMPLE_COMPANY_HELM_PASSWORD" --include-crds "$ARGOCD_ENV_CHART_NAME" "concierge/$ARGOCD_ENV_CHART_NAME" --values $ARGOCD_ENV_VALUES_FILE --version "$ARGOCD_ENV_CHART_VERSION" --namespace "$ARGOCD_APP_NAMESPACE" --kube-version 1.22 > all.yaml && kustomize build | argocd-vault-plugin generate -']
